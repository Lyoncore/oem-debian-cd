#!/bin/bash
#
# Do install stuff for i386, including making bootable CDs
# Works with debian-installer
#
# $1 is the CD number
# $2 is the temporary CD build dir

. $BASEDIR/tools/boot/$CODENAME/common.sh

set -e

N=$1
CDDIR=$2
BOOTDIR=
if [ ! "$WWW_HOME" ];then
   WWW_HOME="http://people.debian.org/~sjogren/d-i/images/daily"
fi

cd $CDDIR/..

#
# This script is called with $1 (now $N) as the CD to 
# make bootable.  N may be in the form "n" or "n_NONUS"
# There may be more than 4 disks...support extras.

# Strip NONUS part of disk number
# NN will be 1...N so it can be used as an index
#
NN=`echo $N | sed -e 's/_NONUS//'`

# List of boot image for each CD
KTYPE[1]="" #isolinux multiboot in fact
KTYPE[2]="cdrom-image"
# XXX add net-image back when it's fixed
KTYPE[3]=""
KTYPE[4]=""
KTYPE[5]=""
KTYPE[6]=""
KTYPE[7]=""
KTYPE[8]=""
KTYPE[9]=""
KTYPE[10]=""

THISTYPE=${KTYPE[$NN]}

# Download boot images
# XXX add net-image.img back when it's fixed
for image in cd_drivers-image.img cdrom-image.img cdrom-initrd.gz floppy-image.img floppy-initrd.gz net_drivers-image.img netboot-initrd.gz vmlinuz ; do
    if [ ! -e "$image" ]; then
	wget $WWW_HOME/$image
    fi
done

if [ "$NN" = "1" ]; then
    echo "Using ISOLINUX boot-disks image on CD$N"
    mkdir -p boot$N/isolinux
    cp -f $BASEDIR/data/$CODENAME/isolinux.bin boot$N/isolinux/
    cp -lf vmlinuz $CDDIR/install/
    cp -lf cdrom-initrd.gz $CDDIR/install/cdrom.gz
    cp -lf netboot-initrd.gz $CDDIR/install/net.gz
    echo -n "-cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table " > $N.mkisofs_opts
else
    if [ -n "$THISTYPE" ]; then
	echo "Using $THISTYPE boot-disks image on CD$N"
	mkdir -p boot$N/boot
	cp $THISTYPE.img boot$N/boot/
	echo -n "-cache-inodes -J -l -b boot/$THISTYPE.img "  > $N.mkisofs_opts
    else
	mkdir boot$N
	echo -n "-cache-inodes -J -l " > $N.mkisofs_opts
    fi
fi

#install_languages $CDDIR

# Only disk one gets the extra files installed
#
if [ "$NN" = "1" ]; then


# populate the install directory as well
cp -lf *.img $CDDIR/install
cp -lf floppy-initrd.gz $CDDIR/install

# ISOLINUX setup

# Include Smart Boot Manager image for people where isolinux fails
gzip -dc $BASEDIR/data/$CODENAME/sbm.bin.gz > $CDDIR/install/sbm.bin
# Keep the original file timestamp
touch -r $BASEDIR/data/$CODENAME/sbm.bin.gz $CDDIR/install/sbm.bin
cp -p $BASEDIR/data/$CODENAME/README.sbm $CDDIR/install/
# Isolinux config files
cp -f $BASEDIR/data/$CODENAME/isolinux.txt $BASEDIR/data/$CODENAME/f*.txt boot$N/isolinux/
cat > boot$N/isolinux/isolinux.cfg <<EOF
DEFAULT /install/vmlinuz
APPEND vga=normal initrd=/install/cdrom.gz ramdisk_size=8192 root=/dev/rd/0 init=/linuxrc devfs=mount,dall rw
LABEL linux
  kernel /install/vmlinuz
LABEL cdrom
  kernel /install/vmlinuz
LABEL net
  kernel /install/vmlinuz
  append vga=normal initrd=/install/net.gz ramdisk_size=8192 root=/dev/rd/0 init=/linuxrc devfs=mount,dall rw
DISPLAY isolinux.txt
TIMEOUT 0
PROMPT 1
F1 f1.txt
F2 f2.txt
F3 f3.txt
F4 f4.txt
F5 f5.txt
F6 f6.txt
F7 f7.txt
F8 f8.txt
F9 f9.txt
F0 f10.txt
EOF

(echo "Tools for DOS :" ; \
	echo "lodlin/         load Linux kernel from DOS" ;\
	echo "rawrite2/       rawrite 2.0 : create disks from disk images (*.bin)"; \
	) |todos > $CDDIR/tools/README.tools

# Loadlin script for starting install via dos/windows
(cat <<EOF;
@ echo off
rem Flush any write-cached disk blocks before we leave DOS. 
If your system does not use smartdrv an error message will appear, 
you can safely ignore that.
smartdrv /c

echo Please choose an install method now
echo 1= CDROM install
echo 2= NET install

choice /c:12
if errorlevel 2 goto TWO
if errorlevel 1 goto ONE

echo doing default somehow and going to ONE
goto ONE

:ONE
echo using CDROM install
loadlin.exe vmlinuz vga=normal initrd=cdrom.gz ramdisk_size=8192 root=/dev/rd/0 init=/linuxrc devfs=mount,dall rw

:TWO
echo using NET install
loadlin.exe vmlinuz vga=normal initrd=net.gz ramdisk_size=8192 root=/dev/rd/0 init=/linuxrc devfs=mount,dall rw

EOF
) |todos > $CDDIR/install/boot.bat

fi

# write final lines to mkisofs_opts
if [ "$NN" = "1" ]; then
    echo -n "boot$N " >> $N.mkisofs_opts
else
    if [ -n "$THISTYPE" ]; then
	echo -n "-c boot/boot.catalog boot$N "  >> $N.mkisofs_opts
    fi
fi

# th,th, thats all
