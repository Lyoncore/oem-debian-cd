#!/bin/bash -x
#
# Do post-image-building tasks for armel+omap, to make vfat images bootable;
# this script encapsulates the VFAT image in a PC partition image, with
# unpartitioned data holding boot data; this is very board specific and targets
# the Marvell Dove reference boards (e.g. Y0/Y1) but might work on other Dove
# boards
#
# $1 is the CD number
# $2 is the temporary CD build dir
# $3 is the image file
#
# Copyright (c) 2009 Canonical
# Authors: Oliver Grawert <ogra@canonical.com>
#          Lo√Øc Minier <loic.minier@canonical.com>
#          Michael Casadevall <michael.casadevall@canonical.com>
#
# TODO
# - use safer -m flag of parted (needs a newer parted)
# - add splash to cmdline (doesn't work right now; LP: #358362)

. "$BASEDIR/tools/boot/$DI_CODENAME/common.sh"

# parted is in /sbin
PATH="$PATH:/sbin"

set -e

N="$1"
CDROOT="$2"
IMAGE="$3"

log() {
    echo "$*" >&2
}

die() {
    log "$@"
    exit 1
}

# Only disk 1* bootable
if ([ "$N" != 1 ] && [ "$N" != 1_NONUS ]) || [ "$CDIMAGE_ADDON" ]; then
    exit 0
fi

# We only want to do this for vfat images
if [ "$IMAGE_FORMAT" == "iso" ]; then
    exit 0
fi

cd "$CDROOT/.."

# this script creates an image to write to a SD card with a PC partition table;
# the first partition is the vfat passed as $3 ($IMAGE) and contains the
# root fs.

# OMAP3 requires very specific CHS partitioning that can't easy be done with parted
# so we'll use sfdisk to properly make the necessary partition layout

# globals (please adjust or autodetect or whatever (based on subarch))
# note thses  paths point to manually unpacked .debs on my disk atm

file_length() {
        stat -c %s "$1"
}

PATH_TO_MLO=/usr/lib/x-loader-omap/MLO
PATH_TO_UBOOT=/usr/lib/u-boot/u-boot-beagle.bin
PATH_TO_UIMAGE=
PATH_TO_INITRD=
EXT3=$IMAGE.rootfs
MTOOLSRC=$IMAGE.mtoolsrc

# Move the ext3 filesystem out of the way
mv $IMAGE $EXT3

# mtools sanity checks are getting in the way, so we need to turn its brain off
cat > $MTOOLSRC <<EOF
mtools_skip_check=1
EOF

export MTOOLSRC

# we leave 72MB for the vfat that carries u-boot, MLO, uImage,
# uInitrd and boot.scr
BOOT_SIZE="$((72 * 1024 * 1024))"

IMAGE_SIZE="$(file_length "$EXT3")"
IMG_SIZE_BLOCKS="$((($BOOT_SIZE + $IMAGE_SIZE + 512 - 1) / 512))"

dd if=/dev/zero of="$IMAGE" bs=512 count=0 seek="$IMG_SIZE_BLOCKS" >/dev/null 2>&1

TRG_SIZE="$(file_length "$IMAGE")"
CYLINDERS=`echo $TRG_SIZE/255/63/512 | bc`

{
    echo ,9,0x0C,*
    echo ,,,-
} | sfdisk -D -H 255 -S 63 -C $CYLINDERS $IMAGE >/dev/null 2>&1

VATSTART=$(parted $IMAGE unit B print|grep "^ 1"|awk '{print $2}')
VATSIZE=$(LANG=C fdisk -l ${IMAGE} 2>/dev/null|grep W95 |awk '{print $5}')

mkdosfs -C $IMAGE.vfat ${VATSIZE} >/dev/null 2>&1
mcopy -i $IMAGE.vfat "${PATH_TO_MLO}" ::MLO
mcopy -i $IMAGE.vfat "${PATH_TO_UBOOT}" ::u-boot.bin
# mcopy -i $IMAGE.vfat "${PATH_TO_UIMAGE} ::uImage
# mcopy -i $IMAGE.vfat "${PATH_TO_INITRD} ::uInitrd

# here we will need to create boot.scr and mcopy it too

# now put the whole vfat into the first partition
dd conv=notrunc bs="${VATSTART%B}" if=$IMAGE.vfat of="$IMAGE" seek=1 >/dev/null 2>&1
rm $IMAGE.vfat

# put ext3 content into the second partition
EXT3START=$(parted $IMAGE unit B print|grep "^ 2"|awk '{print $2}')
dd conv=notrunc bs="${EXT3START%B}" if=$IMAGE.rootfs of="$IMAGE" seek=1 >/dev/null 2>&1

# Cleanup
#rm -f "$IMAGE.rootfs" "$IMAGE.vfat" "$IMAGE.mtoolsrc"
