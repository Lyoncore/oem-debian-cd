#!/bin/bash
#
# Do install stuff for armel+dove, including making bootable CDs
# Works with debian-installer
#
# $1 is the CD number
# $2 is the temporary CD build dir
#
# TODO
# - hardcodes flavour

. $BASEDIR/tools/boot/$DI_CODENAME/common.sh

set -e

N=$1
CDDIR=$2
BOOTDIR=
if [ "$DI_WWW_HOME" = "default" ];then
   DI_WWW_HOME="http://people.debian.org/~joeyh/d-i/images/daily"
fi
if [ ! "$DI_DIST" ]; then
   export DI_DIST="$DI_CODENAME"
fi
if [ -z "$DI_PATH" ]; then
   DI_PATH="$($BASEDIR/tools/find-newest-installer)"
fi

default_preseed

cd $CDDIR/..

#
# This script is called with $1 (now $N) as the CD to.
# make bootable.  N may be in the form "n" or "n_NONUS"
# There may be more than 4 disks...support extras.

# Strip NONUS part of disk number
# NN will be 1...N so it can be used as an index
#
NN=`echo $N | sed -e 's/_NONUS//'`

if [ "$CDIMAGE_ADDON" ]; then
    # second disk, at least in spirit
    NN=2
fi

if [ "$IMAGE_FORMAT" = iso ]; then
    echo -n "-J -joliet-long " > $N.mkisofs_opts

    "$BASEDIR/tools/sorting_weights" "$N"
    echo -n "-sort $(pwd)/$N.weights " >> $N.mkisofs_opts
fi

if [ "$IMAGE_FORMAT" != vfat ]; then
    echo "armel booting for image format '$IMAGE_FORMAT' disabled for now"
    exit 0
fi

# XXX hardcodes SUBARCH / FLAVOUR
SUBARCH=dove
FLAVOUR=dove

BOOT_IMAGES="udeb.list $SUBARCH/cdrom/initrd.gz"
DISK_IMAGES=""
TAR_IMAGES=""

# XXX kernel needs to be fixed so that we stop needing this cruft
if [ "$DI_WWW_HOME" ]; then
    echo "boot-armel does not support DI_WWW_HOME mode at the moment" >&2
    exit 1
fi
BOOT_IMAGE_KERNEL=
for vmlinuz in "$DI_PATH/current/images/$SUBARCH/cdrom/vmlinuz"-*-"$FLAVOUR"; do
    BOOT_IMAGE_KERNEL="$SUBARCH/cdrom/$(basename "$vmlinuz")"
done
if [ -z "$BOOT_IMAGE_KERNEL" ]; then
    echo "no kernel found in $DI_PATH/current/images/$SUBARCH/cdrom/!" >&2
    exit 1
fi
BOOT_IMAGES="$BOOT_IMAGES $BOOT_IMAGE_KERNEL"

#### the snippet below was copied from the i386 version
# Download boot images
for image in $BOOT_IMAGES $DISK_IMAGES $TAR_IMAGES; do
    if [ ! -e "$image" ]; then
	dir=$(dirname $image)
	mkdir -p $dir
	if [ ! "$DI_WWW_HOME" ];then
		cp "$DI_PATH/current/images/$image" "$image"
	else
		wget "$DI_WWW_HOME/$image" -O "$image"
	fi
    fi
done

mv $BOOT_IMAGE_KERNEL $SUBARCH/cdrom/vmlinuz

if [ "$NN" = "1" ]; then
    check_kernel_sync udeb.list $FLAVOUR

    do_uboot=0
    if [ "$CDIMAGE_INSTALL_BASE" = 1 ]; then
	do_uboot=1
	uboot_desc="Ubuntu Alternate Installer"
	uboot_input_kernel="/cdrom/uImage.in"
	uboot_input_initrd="/cdrom/uInitrd.in"
	uboot_kernel="/cdrom/uImage"
	uboot_initrd="/cdrom/uInitrd"
	uboot_extra_cmdline=""

	cp -lf "$SUBARCH/cdrom/vmlinuz"   "$CDDIR/$uboot_input_kernel"
	cp -lf "$SUBARCH/cdrom/initrd.gz" "$CDDIR/$uboot_input_initrd"
    fi

    if [ "$CDIMAGE_LIVE" = 1 ]; then
	do_uboot=1
	uboot_desc="Ubuntu LiveCD"
	uboot_input_kernel="/casper/uImage.in"
	uboot_input_initrd="/casper/uInitrd.in"
	uboot_kernel="/casper/uImage"
	uboot_initrd="/casper/uInitrd"
	uboot_extra_cmdline=" -- boot=casper"

	mv "$CDDIR/casper/filesystem.kernel-$FLAVOUR" "$CDDIR/$uboot_input_kernel"
	mv "$CDDIR/casper/filesystem.initrd-$FLAVOUR" "$CDDIR/$uboot_input_initrd"
    fi

    if [ "$do_uboot" ]; then
	uboot_script_text="$CDDIR/boot.script"
	uboot_script_image="$CDDIR/boot.scr"
	uboot_kernel_addr="0x00200000"
	uboot_ramdisk_addr="0x01100000"

	rm -f "$uboot_script_text"
	cat >"$uboot_script_text" <<EOF
echo Loading $uboot_desc...
fatload usb 0:1 $uboot_kernel_addr $uboot_kernel
fatload usb 0:1 $uboot_ramdisk_addr $uboot_initrd
setenv bootargs console=ttyS0,115200 console=tty0 file=/cdrom/preseed/ubuntu.seed$uboot_extra_cmdline
bootm $kernel_addr $ramdisk_addr
EOF
	mkimage -A arm -T script -C none -n "Ubuntu boot script" -d "$uboot_script_text" "$uboot_script_image"
	rm -vf "$uboot_script_text"

	rm -f "$uboot_input_kernel"
	# do a copy for now
	cp "$uboot_input_kernel" "$CDDIR/$uboot_kernel"
	#mkimage -A arm -O linux -T kernel -C none -a 0x00008000 -e 0x00008000 -n "Ubuntu Kernel" -d "$uboot_input_kernel" "$CDDIR/$uboot_kernel"
	rm -vf "$uboot_input_kernel"

	rm -f "$uboot_input_initrd"
	mkimage -A arm -O linux -T ramdisk -C gzip -a 0x0 -e 0x0 -n "Ubuntu Alternate initramfs" -d "$uboot_input_initrd" "$CDDIR/$uboot_initrd"
	rm -vf "$uboot_input_initrd"
    fi
fi

# th,th, thats all
