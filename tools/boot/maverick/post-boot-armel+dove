#!/bin/bash
#
# Do post-image-building tasks for armel+dove, to make vfat images bootable;
# this script encapsulates the VFAT image in a PC partition image, with
# unpartitioned data holding boot data; this is very board specific and targets
# the Marvell Dove reference boards (e.g. Y0/Y1) but might work on other Dove
# boards
#
# $1 is the CD number
# $2 is the temporary CD build dir
# $3 is the image file
#
# Copyright (c) 2009 Canonical
# Authors: Oliver Grawert <ogra@canonical.com>
#          Lo√Øc Minier <loic.minier@canonical.com>
#          Michael Casadevall <michael.casadevall@canonical.com>
#
# TODO
# - use safer -m flag of parted (needs a newer parted)
# - add splash to cmdline (doesn't work right now; LP: #358362)

. "$BASEDIR/tools/boot/$DI_CODENAME/common.sh"

# parted is in /sbin
PATH="$PATH:/sbin"

set -e

N="$1"
CDROOT="$2"
IMAGE="$3"

log() {
    echo "$*" >&2
}

die() {
    log "$@"
    exit 1
}

# Only disk 1* bootable
if ([ "$N" != 1 ] && [ "$N" != 1_NONUS ]) || [ "$CDIMAGE_ADDON" ]; then
    exit 0
fi

# We only want to do this for vfat images
if [ "$IMAGE_FORMAT" != "vfat" ]; then
    exit 0
fi

cd "$CDROOT/.."

# this script creates an image to write to a SD card with a PC partition table;
# the first partition is the vfat passed as $3 ($IMAGE) and contains the
# root fs.

# the PC partitions have addresses which are constrained by what can be
# expressed in CHS / LBA; non-CHS aligned values scare fdisk, but parted is
# fine with pure LBA addresses on 512 bytes boundaries, so we use that

file_length() {
    stat -c %s "$1"
}

IMAGE_SIZE="$(file_length "$IMAGE")"

# round size to next block; note we add 512 for MBR + partition table; also
# note we assume blocks of 512 B
IMG_SIZE_BLOCKS="$(((512 + $IMAGE_SIZE + 512 - 1) / 512))"

# rename the VFAT image out of the way for the disk image
mv -f "$IMAGE" "$IMAGE.vfat"

hex2dec() {
    printf "%d\n" "$1"
}

# create the blank disk image (and this is a sparse file)
dd if=/dev/zero of="$IMAGE" bs=512 count=0 seek="$IMG_SIZE_BLOCKS" 2>/dev/null

# create partition table
log "initializing disk label (MBR and partition table)..."
parted -s "$IMAGE" mklabel msdos

# outputs actual partition start offset, end offset, and length, suffixed with
# B
get_part_data() {
    local n="$1"

    LANG=C parted -s "$IMAGE" unit B print | awk "/^ $n / { print \$2 \" \" \$3 \" \" \$4 }"

    # safer version using parted -m; needs newer parted
    #LANG=C parted -m -s "$IMAGE" unit B print | grep "^$n:" | cut -d: -f 2,3,4 --output-delimiter=" "
}

# read disk size, or rather last disk byte, with a "B" char at the end of the
# output
# safer version using parted -m; needs newer parted
#DISK_END_B="$(LANG=C parted -m -s "$IMAGE" unit B print | tail -1 | cut -d : -f 2)"
DISK_END_B="$(LANG=C parted -s "$IMAGE" unit B print | sed -rn 's/^Disk [^:]+: ([0-9]+B)$/\1/p')"

# create partition for the VFAT
log "creating VFAT partition..."
parted -s "$IMAGE" mkpart primary fat32 0 "$((${DISK_END_B%B} - 1))B"

VFAT_LEN_B="`(set -- $(get_part_data 1); echo "$3")`"
if [ "${VFAT_LEN_B%B}" -lt "$IMAGE_SIZE" ]; then
    die "VFAT partition length is $VFAT_LEN_B and doesn't leave enough room for VFAT ${IMAGE_SIZE}B"
fi

VFAT_START_B="`(set -- $(get_part_data 1); echo "$1")`"
log "writing vfat contents..."
dd conv=notrunc bs="${VFAT_START_B%B}" if="$IMAGE.vfat" of="$IMAGE" seek=1 2>/dev/null

# VFAT isn't needed anymore
rm -f "$IMAGE.vfat"
