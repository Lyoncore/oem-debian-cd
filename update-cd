#!/bin/sh
#
# $Id: update-cd,v 1.6 2002/04/16 00:25:46 93sam Exp $
# 
# (c) Steve McIntyre <stevem@chiark.greenend.org.uk> Released under
# GNU GPL v2 1st January 2001
#
# Quick and dirty script to create update CDs for people to upgrade
# from potato (2.2r0) to the latest release level
#
# Configuration goes here.
# Where is your mirror?
MIRROR=${MIRROR:-/mirror/debian}

# If you have a non-US mirror, where is it? Leave blank if you don't have one.
NONUS=${NONUS:-$MIRROR/non-US}

# Do you want non-free? 1 for yes, 0 for no
NONFREE=1

# What release version is this?
VER=2.2r6

# Path to use with mkisofs/mkhybrid
MKISOFS=${MKISOFS:-"mkhybrid"}

# The working directory to use. MUST be on the same partition as the mirror.
TDIR=/mirror/debian-cd

# Building potato cd set ...
CODENAME=potato

# Path where the images will be written
OUT=/mirror/debian-cd

# Location of the diff file to use to determine the changes. If you leave
# this blank, we'll try to determine the changes from the ChangeLog files,
# which is probably less accurate. 
DIFF=/mirror/lists/r0-r6.diff #~/r2.diff

REL=Debian"$VER"
CLOG=dists/potato/ChangeLog
NUCLOG=dists/potato/non-US/ChangeLog
UPD=$TDIR/potato-update
DATE=`date +%Y%m%d`
BASEDIR=`pwd`


# The full update will not fit on a single CD, so split it arbitrarily
# CD 1 gets arm/i386/source
# CD 2 gets alpha/m68k/powerpc
# CD 3 gets sparc
# binary-all goes on all 3

INFO1="Debian GNU/Linux $VER Update CD $DATE: Arm, I386 and source"
INFO2="Debian GNU/Linux $VER Update CD $DATE: Alpha, M68k and PowerPc"
INFO3="Debian GNU/Linux $VER Update CD $DATE: Sparc"
ARCH1="arm i386 src all"
ARCH2="alpha m68k powerpc all"
ARCH3="sparc all"

export TDIR NONFREE NONUS VER MIRROR CODENAME OUT BASEDIR

scanpackages=$BASEDIR/tools/scanpackages.old
scansources=$BASEDIR/tools/scansources.old
set_mkisofs_opts=$BASEDIR/tools/set_mkisofs_opts
adddirs=$BASEDIR/tools/add_dirs
addfiles=$BASEDIR/tools/add_files

copy_trees () {
    CDDIR=$1
    shift
    SRCLIST=$1
    shift
    BINLIST=$1
    shift
    ARCHES=$*
    echo "  Copying \"$ARCHES\" files into $UPD/$CDDIR"
    for ARCH in $ARCHES
    do
        if [ "$ARCH" = "src" ] ; then
            cat $SRCLIST | xargs $addfiles $UPD/$CDDIR $MIRROR
        else
            cat $BINLIST | grep binary-$ARCH | xargs $addfiles $UPD/$CDDIR $MIRROR
        fi
    done
}

remove_unwanted () {
    CDDIR=$1
    shift
    ARCHES=$*
    echo "  Removing \"$ARCHES\" from $CDDIR"
    for ARCH in $ARCHES
    do
        case "$ARCH" in
            src)
                find $CDDIR -type d | grep source$ | xargs rm -rf
                ;;
            all)
                ;;
            *)
                find $CDDIR -type d | egrep -e binary-$ARCH$ | xargs rm -rf
                ;;
        esac
    done
}

create_control_files () {
    CDDIR=$1
    shift
    ARCHES=$*
    echo "  Creating control files for \"$ARCHES\" on $CDDIR"
    for ARCH in $ARCHES
    do
        case "$ARCH" in
            src)
                echo "    src"
                $scansources $CDDIR >/dev/null 2>&1
                ;;
            all)
                ;;
            *)
                echo "    $ARCH"
                ARCH=$ARCH $scanpackages scan $CDDIR >/dev/null 2>&1
                ARCH=$ARCH $scanpackages -noPackages.cd install $CDDIR >/dev/null 2>&1
                rm -f $CDDIR/*.Packages* >/dev/null 2>&1
                ;;
        esac
    done
}

echo Cleaning up
rm -rf $UPD
mkdir $UPD $UPD/CD1 $UPD/CD2 $UPD/CD3

echo Creating directory trees
for ARCH in $ARCH1 $ARCH2 $ARCH3
do
	export ARCH
	$adddirs $UPD/CD1
	$adddirs $UPD/CD2
	$adddirs $UPD/CD3
done

cd $MIRROR
echo Creating main-section list

if [ -e $DIFF ] ; then
	grep -v non-US $DIFF >$UPD/list
	egrep -e \\.deb$ $UPD/list >$UPD/bin-list
	egrep -e ^dists.*\\.gz$ -e ^dists.*\\.dsc$ $UPD/list >$UPD/src-list
else
	egrep -e ^dists.*\\.deb$ $CLOG >$UPD/bin-list
	egrep -e ^dists.*\\.gz$ -e ^dists.*\\.dsc$ $CLOG >$UPD/src-list
fi
if [ "$NONFREE"x != "1"x ] ; then
	echo Removing non-free
	grep -v non-free $UPD/bin-list > $UPD/bin-list1
	mv -f $UPD/bin-list1 $UPD/bin-list
	grep -v non-free $UPD/src-list > $UPD/src-list1
	mv -f $UPD/src-list1 $UPD/src-list
fi

echo Creating trees

copy_trees CD1 $UPD/src-list $UPD/bin-list $ARCH1
copy_trees CD2 $UPD/src-list $UPD/bin-list $ARCH2
copy_trees CD3 $UPD/src-list $UPD/bin-list $ARCH3

if [ "$NONUS"x != ""x ] ; then
	echo Creating non-US list
	cd $NONUS
	if [ -e $DIFF ] ; then
		grep non-US $DIFF >$UPD/nu-list
		egrep -e \\.deb$ $UPD/nu-list >$UPD/bin-nu-list
		egrep -e ^dists.*\\.gz$ -e ^dists.*\\.dsc$ $UPD/nu-list >$UPD/src-nu-list
	else
		egrep -e ^dists.*\\.deb$ $NUCLOG | sed 's?^stable?dists/potato?g' > $UPD/bin-nu-list
		egrep -e ^dists.*\\.gz$ -e ^dists.*\\.dsc$ $NUCLOG | sed 's?^stable?dists/potato?g' > $UPD/src-nu-list
	fi

	if [ "$NONFREE"x != "1"x ] ; then
		echo Removing non-free
		grep -v non-free $UPD/bin-nu-list > $UPD/bin-nu-list1
		mv -f $UPD/bin-nu-list1 $UPD/bin-nu-list
		grep -v non-free $UPD/src-nu-list > $UPD/src-nu-list1
		mv -f $UPD/src-nu-list1 $UPD/src-nu-list
	fi

	echo Creating non-US trees
    copy_trees CD1 $UPD/src-nu-list $UPD/bin-nu-list $ARCH1
    copy_trees CD2 $UPD/src-nu-list $UPD/bin-nu-list $ARCH2
    copy_trees CD3 $UPD/src-nu-list $UPD/bin-nu-list $ARCH3
fi

cd $UPD
echo Splitting binary dirs between trees

remove_unwanted CD1 $ARCH2 $ARCH3
remove_unwanted CD2 $ARCH1 $ARCH3
remove_unwanted CD3 $ARCH1 $ARCH2

# Now create the binary-all symlinks
echo Creating binary-all symlinks
for DIR in `find . -name binary-all`
do
	cd $DIR
	for CAT in *
	do
		if [ $CAT != '*' ] ; then
			if [ -d $CAT ] ; then
				cd $CAT
			fi
			for FILE in *.deb
			do
				if [ $FILE != '*.deb' ] ; then
					for ARCH in alpha arm i386 m68k powerpc sparc
					do
						if [ -d ../../binary-$ARCH ] ; then
							if [ ! -d ../../binary-$ARCH/$CAT ] ; then
								mkdir ../../binary-$ARCH/$CAT
							fi
						ln -s ../../binary-all/$CAT/$FILE ../../binary-$ARCH/$CAT
						fi
					done
				fi
			done
			if [ -d ../$CAT ] ; then
				cd ..
			fi
		fi
	done
	cd $UPD
done

echo Creating .disk/info files
echo $INFO1 >CD1/.disk/info
echo $INFO2 >CD2/.disk/info
echo $INFO3 >CD3/.disk/info

echo Creating Packages and Sources files
create_control_files CD1 $ARCH1
create_control_files CD2 $ARCH2
create_control_files CD3 $ARCH3

echo Creating images
echo "  CD1:"
${MKISOFS} -J -r -V "Debian $VER update CD" -o $OUT/potato-update-1.raw CD1 2>&1 | grep "extents written"
echo "  CD2:"
${MKISOFS} -J -r -V "Debian $VER update CD" -o $OUT/potato-update-2.raw CD2 2>&1 | grep "extents written"
echo "  CD3:"
${MKISOFS} -J -r -V "Debian $VER update CD" -o $OUT/potato-update-3.raw CD3 2>&1 | grep "extents written"



